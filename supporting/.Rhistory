3328/228
14*228
3328 - 14*228
228/136
228-136
136/92
136-92
92-44
92/44
92-88
44/4
3328/228
3328/11
3328-14*228
226/136
226-136
228-136
136/92
136-92
92/44
92-2*44
228/11
x <- 3328
y <- 228
x/y
q <- function(x,y){floor(x/y)}
r <- function(x,y){x - q(x,y)*y}
q(x,y)
#### CODE ####
curdir <- dirname(rstudioapi::getSourceEditorContext()$path)
db <- read.csv(paste0(curdir,"\\google-form.csv"))
fix_df <- function(db){
blank_cols <- mapply(grepl,"X.",colnames(db)) | colnames(db) == "X"
blank_rows <- db$Timestamp==""
db <- db[!blank_rows,!blank_cols]
db
}
db <- fix_df(db)
#colnames(db)
first_cols <- c("Timestamp","Building")
repeated_cols <- c("RoomNum",
"RoomType",
"Answer",
paste0("Disposition",1:10),
paste0("Signed",1:10),
"Names",
"Anecdoes",
"Concerns",
"FollowUp",
"Additional",
"Loop")
num_room_entries <- (length(colnames(db)) - length(first_cols))/length(repeated_cols)
new_cols <- c(first_cols,rep(repeated_cols,floor(num_room_entries)))
colnames(db) <- new_cols
indices_of_room_changes <- (length(first_cols) + (0:(num_room_entries))*length(repeated_cols)) + 1
long_db <- db[,indices_of_room_changes[1]:(indices_of_room_changes[2]-1)]
for (i in 2:(num_room_entries)){
prev_entry <- indices_of_room_changes[i]
next_entry <- indices_of_room_changes[i+1] - 1
append_db <- db[,prev_entry:next_entry]
long_db <- rbind(long_db,db[,prev_entry:next_entry])
}
for(col in first_cols){
long_db[,col] <- db[,col]
}
long_db <- data.frame(long_db[,first_cols],long_db[,repeated_cols])
x <- rep(0,10000)
y <- rep("hello",1000)
z <- rep("adfgfghgfh",1000)
z <- rep("adfadgfhfghfhfhhgfh",1000)
z <- rep("adfadgfhfghfhfhhgfh",10000)
rm(list=ls())
curdir <- dirname(rstudioapi::getSourceEditorContext()$path)
subdir <- paste0(curdir, "/supporting/")
setwd(subdir)
source("bernEst_startup.R")
View(r_df)
make_lower <- function(param_names){
sapply(param_names,function(name){if(grepl("mean",name)){return(-5)}else{return(0)}})
}
make_start <- function(p_names, extensive=FALSE){
if(extensive){
steps <- c(100,1,0.25)
bounds <- matrix(c(100,0,0.25, #100,1,0.25,600,3,1.5
600,3,1.5),ncol=2)
} else {
steps <- c(200,2,0.5)
bounds <- matrix(c(200,1,0.25,
600,3,1.25),ncol=2)
}
param_name_to_start_bounds <- function(p_name){
if(grepl("scale",p_name)){
seq(bounds[1,1],bounds[1,2],steps[1])
} else if (grepl("mean",p_name)){
seq(bounds[2,1],bounds[2,2],steps[2])
} else {
seq(bounds[3,1],bounds[3,2],steps[3])
}
}
out_bounds = lapply(p_names,param_name_to_start_bounds)
out <- expand.grid(out_bounds)
colnames(out) <- p_names
out
}
nls_fit <- function(start, a_df, m_expr){
nls(m_expr,
data=a_df,
start = start,
lower = make_lower(names(start)),
algorithm="port")
}
find_nls_fit <- function(a_df,model_name,
find_best=TRUE,
model_expr = NULL){
search_for_nls <- function(){
search_while_true <-  expr((is.null(out_nls) | find_best) & i < nrow(starts))
out_nls <- NULL
while(eval(search_while_true)){
i = i +  1
start = starts[i,]
if(length(start)==1){names(start) <- dimnames(starts)[[2]]}
tryCatch({
new_nls <- nls_fit(start,a_df,model_expr)
if(is.null(out_nls)){
out_nls <- new_nls
} else if(logLik(new_nls) > logLik(out_nls)){
out_nls <- new_nls
}
},error = function(e){})
}
return(out_nls)
}
if(is.null(model_expr)){
g <- quote(NumAdjs)
h <- model_exprs[[model_name]]
model_expr <- substitute(g~h, list(g=g, h=h))
}
params <- expr_to_param(model_expr)
starts <- make_start(params)
lower <- make_lower(params)
out_nls <- NULL
i = 0
out_nls <- search_for_nls()
if(is.null(out_nls)){
print("second try")
starts <- make_start(params,extensive=TRUE)
find_best <- FALSE
out_nls <- search_for_nls()
if(is.null(out_nls)){
print("double failure")
}
}
return(out_nls)
}
find_ppt_fit <- function(pptid,model_name,find_best=TRUE,a_df = adj_df){
print(pptid)
ppt_df <- a_df[a_df$PptId==pptid,]
find_nls_fit(ppt_df,model_name,find_best)
}
individual_nls_fits <- readRDS(file = "ind_ppt_gauss_series.rds")
group_nls_fits <- readRDS(file = "group_gauss_series.rds")
individual_nls_fits <- readRDS(file = "ind_ppt_gauss_series.rds")
individual_nls_fits <- readRDS(file = "ind_ppt_gauss_series.rds")
group_nls_fits <- readRDS(file = "group_gauss_series.rds")
expr_to_param <- function(model_expr){
ws <- unlist(str_extract_all(deparse(model_expr), "\\w+"))
is_param_name <- sapply(ws,function(w){grepl(".+\\d",w)})
if("auto2_param" %in% ws){
not_params <- c(which(ws=="auto2_param"), which(ws=="auto2_param")+1)
is_param_name[not_params] <- FALSE
#is_param_name <- sapply(ws,function(w){grepl(".+\\d",w) & !grepl("2",w)})
}
ws[is_param_name]
}
manual_boolean <- adj_df$Condition=="Manual"
manual_ids <- unique(adj_df$PptId[manual_boolean])
automatic_ids <- unique(adj_df$PptId[!manual_boolean])
model_exprs <- list(auto1 = expr(scale1*dnorm(AdjSize,mean1,stdev1)),
auto2 = expr(scale1*dnorm(AdjSize,0,stdev1) + scale2*dnorm(AdjSize,mean2,stdev2)),
man2 = expr(scale1*dnorm(AdjSize,0,stdev1) + auto2_param[["scale2"]]*dnorm(AdjSize,auto2_param[["mean2"]],auto2_param[["stdev2"]])),
man3 = expr(scale1*dnorm(AdjSize,0,stdev1) + auto2_param[["scale2"]]*dnorm(AdjSize,auto2_param[["mean2"]],auto2_param[["stdev2"]]) + scale3*dnorm(AdjSize,mean3,stdev3)),
man3_alt  = expr(scale1*dnorm(AdjSize,0,stdev1) + scale2*dnorm(AdjSize,mean2,stdev2) + scale3*dnorm(AdjSize,mean3,stdev3)))
param_names <- sapply(model_exprs,expr_to_param)
model_names <- c("auto1","auto2","man2_man","man3_man")
model_descriptions <- c(auto1 = "A. Automatic\n One Gaussian",auto2 = "B. Automatic\n Two Gaussian",man2 = "C. Manual\n Two Gaussian",man3 = "D. Manual\n Three Gaussian")
model_conditions <- c("Automatic","Automatic","Manual","Manual")
auto2_param <-  individual_nls_fits[["auto_avg"]]$m$getAllPars()
unlist_nls <- function(nls_fits,
fit_names = names(nls_fits)){
unlist(nls_fits[fit_names],recursive=F)
}
AIC_diffs <- function(nls_fits,
model_names = list(c("man2_man","man3_man"),c("man2_auto","man3_auto")),
f = AIC){
lapply(model_names,function(model_name){
mod1 <- nls_fits[[model_name[1]]]
mod2 <- nls_fits[[model_name[2]]]
valid_nls <- !sapply(mod1,is.null) & !sapply(mod2,is.null)
sapply(mod1[valid_nls],f) - sapply(mod2[valid_nls],f)
})
}
nls_to_function <- function(nls_obj,
rescale_nls=FALSE){
rescale <- function(params){
is_scale <- sapply(names(params),grepl,pattern="scale")
total_scale <- sum(params[is_scale])
params[is_scale] <- params[is_scale]/total_scale
params
}
set_params <- function(){
params <- nls_obj$m$getAllPars()
if(rescale_nls){params <- rescale(params)}
for(param_name in names(params)){
ex <- str2expression(paste0(param_name,"<-",params[param_name]))
env <- parent.env(environment())
eval(ex,env)
}
}
str_model_expr <- paste_list(deparse(nls_obj$m$formula()))
str_model_expr <- strsplit(str_model_expr," ~ ")[[1]][2]
model_expr <- str2lang(str_model_expr)
set_params()
return(function(AdjSize){
eval(model_expr)
})
}
nls_to_model_name <- function(nls_obj){
str_model_expr <- paste_list(deparse(nls_obj$m$formula()))
str_model_expr <- strsplit(str_model_expr," ~ ")[[1]][2]
model_expr <- str2lang(str_model_expr)
str_model_exprs <- sapply(model_exprs,function(mexpr){paste_list(deparse(mexpr))})
names(which(sapply(str_model_exprs,`==`,str_model_expr)))
}
est_G_numadj <- function(model_name,G_id){
if(grepl("man",model_name) & G_id==2){
#manual participants are not fit to gaussian 2; they take it from automatic participants (their distribution of known updating events)
f <- function(x){auto2_param["scale2"]*dnorm(x,auto2_param["mean2"],auto2_param["mean2"])}
est_numadj <- integrate(f,-100,100)$value
} else {
mk_f <- function(id_num){
return(function(AdjSize){
G_scale <- mod_param[paste0("scale",G_id),id_num]
G_sd <- mod_param[paste0("stdev",G_id),id_num]
G_scale*dnorm(AdjSize,mean=0,sd=G_sd)
})
}
mod_param <- get_nls_param(model_name)
fs <- sapply(1:dim(mod_param)[2],mk_f)
est_numadj <- sapply(fs,function(f){
integrate(f,-100,100)$value
})
}
round(est_numadj,2)
}
total_est_numadj <- function(model_name){
mod_param_names <- dimnames(get_nls_param(model_name))[[1]]
mod_Gs <- unique(sapply(mod_param_names,function(param_name){gsub("[a-z]","",param_name)}))
num_G <- max(as.numeric(mod_Gs))
G_estadj <- lapply(1:num_G,est_G_numadj,model_name=model_name)
sum(sapply(G_estadj,mean))
}
quick_plot <- function(nls_mods, mod_descr,
window_bounds = c(-15,15)){
window <- window_bounds[1]:window_bounds[2]
in_window <-  c(-100:100) >= window_bounds[1] & c(-100:100) <= window_bounds[2]
nls_mods <- nls_mods[!sapply(nls_mods,is.null)]
mod_fs <- lapply(nls_mods,nls_to_function)
mod_names <- sapply(nls_mods,nls_to_model_name)
mod_names <- mod_descr[mod_names]
nls_adjsize <- seq(window_bounds[1],window_bounds[2],0.25)
mod_estimates <- lapply(mod_fs,function(f){f(nls_adjsize)})
mod_data <- lapply(nls_mods,function(nls_obj){nls_obj$m$getEnv()$NumAdjs[nls_obj$m$getEnv()$AdjSize >= window_bounds[1] & nls_obj$m$getEnv()$AdjSize <= window_bounds[2]]})
nls_df <- data.frame(PptIndex = rep(1:length(nls_mods),each=length(nls_adjsize)),
AdjSize = rep(nls_adjsize,length(nls_mods)),
Estimates = round(unlist(mod_estimates),4),
Model = rep(mod_names,each=length(nls_adjsize)))
gg_df <- data.frame(PptIndex = rep(1:length(nls_mods),each=length(window)),
AdjSize=rep(window,length(nls_mods)),
NumAdj=unlist(mod_data),
Model=rep(mod_names,each=length(window)))
p <- ggplot(gg_df,aes(x=AdjSize,y=NumAdj))+
stat_summary(geom="line",fun=mean,color="red",size=1,alpha=0.5)+
stat_summary(geom="line",fun=mean,data=nls_df,aes(x=AdjSize,y=Estimates))+
xlab("Adjustment Size")+
ylab("Number of Adjustments")
p <- p   +  facet_wrap(~Model,ncol = length(unique(mod_names)))
p <- make_APA(p)
p <- p + theme(axis.title.x = element_text(size = 13),
axis.title.y = element_text(size = 13),
strip.text.x = element_text(size = 11),
panel.spacing = unit(1.5, "lines"))
return(p)
}
get_nls_param <- function(model_name){
nls_fits <- individual_nls_fits[[model_name]]
nls_fits <- nls_fits[!sapply(nls_fits,is.null)]
sapply(nls_fits,function(mod){mod$m$getAllPars()})
}
quick_plot(unlist_nls(individual_nls_fits,c("auto1","auto2","man2_man","man3_man")),model_descriptions)
AIC_diff_auto12 <- unlist(AIC_diffs(individual_nls_fits,list(c("auto1","auto2"))))
AIC_diff_man23 <- unlist(AIC_diffs(individual_nls_fits,list(c("man2_man","man3_man"))))
AIC_diff_auto23 <- unlist(AIC_diffs(individual_nls_fits,list(c("man2_auto","man3_auto"))))
AIC_diff_auto12
AIC_diff_man23
AIC_diff_auto23
plot_ppts <- function(ppts_to_display,
blocknum=c(1),
n_col=2,
n_row=2,
n_trials=333){
gg_df <- r_df[r_df$PptId %in% ppts_to_display,c("PptId","Condition","AdjSize","TrueBernoulliParam","bernoulliEstimate","BlockNum","TrialNum")]
#1. set-up adjsign for the colouring of the participant response line (green, red, or neutral)
gg_df$AdjSign <- NA
gg_df$AdjSign <- shifter(sign(gg_df$AdjSize),1)
#2. order participants
gg_df$PptId <- factor(gg_df$PptId,levels = ppts_to_display,ordered=T)
#3. reduce the df to only have the blocks i want to display
gg_df <- gg_df[gg_df$BlockNum %in% blocknum & (gg_df$TrialNum-1)%%333 <= n_trials,]
make_labeler <- function(colname,replace_dict){
function(labels, multi_line = TRUE, sep = ": ")
{
labels[[colname]] <- as.character(labels[[colname]])
labels[[colname]] <- listreplace(labels[[colname]],names(replace_dict),replace_dict)
list(unname(unlist(labels[[colname]])))
}
}
f <- make_labeler('PptId',cond_dict)
p <- ggplot(gg_df, aes(x=TrialNum))+
geom_line(aes(y=TrueBernoulliParam),color="black",size=0.5,linetype="dashed")+
geom_line(aes(y=bernoulliEstimate,color=AdjSign),size=1.0,show.legend = F)+
facet_wrap(~PptId,scales = 'free',
labeller = f,
ncol=n_col,nrow=n_row)+
coord_cartesian(ylim = c(0,1))+
themeAPA()+
labs(x = "Trial Number", y = "Bernoulli Parameter")+
scale_colour_gradient(low = "#ff0000", high = "#00FF28")
p <- make_APA(p)
p <- p + theme(axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
strip.text.x = element_text(size = 15))
p
}
ppts_to_display <- c(c("361756","347989"),c("410113","430963"))
plot_ppts(ppts_to_display) + theme(aspect.ratio=1.5/3)
id <- runif(6,min=1,max=26)
id
id <- floor(runif(6,min=1,max=26))
id
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
abd_id <- alphabet[id]
abd_id
abd_id <- paste_list(alphabet[id],sep="")
abd_id
make_rand_id <- function(){
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
abd_id <- paste_list(alphabet[id],sep="")
}
sapply(full_ids,make_rand_id)
make_rand_id <- function(){
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
abd_id <- paste_list(alphabet[id],sep="")
}
sapply(full_ids,make_rand_id)
alphabet[id]
make_rand_id <- function(){
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
paste_list(alphabet[id],sep="")
}
sapply(full_ids,make_rand_id)
make_rand_id <- function(){
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
paste_list(alphabet[id],sep="")
}
sapply(full_ids,make_rand_id)
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
paste_list(alphabet[id],sep="")
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
paste_list(alphabet[id],sep="")
make_rand_id <- function(pptid){
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
paste_list(alphabet[id],sep="")
}
sapply(full_ids,make_rand_id)
make_rand_id <- function(pptid){
id <- floor(runif(6,min=1,max=26))
alphabet <- c("A","B","C","D","E","F","G",
"H","I","J","K","L","M","N","O","P",
"Q","R","S","T","U","V","W","X","Y","Z")
paste_list(alphabet[id],sep="")
}
replace_ids <- sapply(full_ids,make_rand_id)
names(replace_ids) <- full_ids
replace_ids
replace_ids[r_df$PptId]
replace_ids
replace_ids[as.character(r_df$PptId)]
r_df$PptId <- replace_ids[as.character(r_df$PptId)]
View(r_df)
write.csv(r_df,"bernEstData.csv")
curdir <- dirname(rstudioapi::getSourceEditorContext()$path)
subdir <- paste0(curdir, "/supporting/")
setwd(subdir)
source("bernEst_startup.R")
replace_ids
paste_list(replace_ids )
paste_list(replace_ids,sep=",")
paste_list(names(replace_ids),sep=",")
